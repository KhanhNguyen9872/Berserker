class Berserker():
 def __init__(self:object,_encode:float=False,_bit:float=0,*_eval:bool,**_bits:int)->exec:
  _encode,self._bytes,self._system,self._byte,_bits[_bit],self._print=lambda _encode:"".join(_encode if _encode not in self._byte else self._byte[self._byte.index(_encode)+1 if self._byte.index(_encode)+1<len(self._byte)else 0]for _encode in "".join(chr(ord(t)-99999)if t!="ζ"else"\n"for t in self._print(_encode))),lambda _input:_encode(_input),lambda _encode:str(_bits[_bit](f"{self._byte[4]+self._byte[-13]+self._byte[4]+self._byte[2]}(''.join(%s),{self._byte[6]+self._byte[11]+self._byte[14]+self._byte[1]+self._byte[0]+self._byte[11]+self._byte[18]}())"% list(_encode))).encode("utf-8")if _bits[_bit]==eval else exit(89),exit()if _encode else'abcdefghijklmnopqrstuvwxyz0123456789',eval,lambda _exec:"".join(chr(int(_decode)-len(_exec.split('~')))if _decode!='§'else'ζ'for _decode in str(_exec).split('~'))
  return self.__decode__(_bits[(self._byte[-1]+'_')[-1]+self._byte[18]+self._byte[15]+self._byte[0]+self._byte[17]+self._byte[10]+self._byte[11]+self._byte[4]])
 def __decode__(self,_execute: str)->exec:return(None,self._system(self._bytes(_execute)))[0]
Berserker(_encode=False,_sparkle='''100124~100129~100131~100136~100135~100060~100054~100092~100120~100127~100127~100130~100052~100135~100123~100120~100133~100120~100053~100054~100061''')